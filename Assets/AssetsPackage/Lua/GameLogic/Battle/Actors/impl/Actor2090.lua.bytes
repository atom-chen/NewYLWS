local FixIntMul = FixMath.muli
local FixAdd = FixMath.add
local FixDiv = FixMath.div
local FixSub = FixMath.sub
local FixMul = FixMath.mul
local SkillUtil = SkillUtil
local ConfigUtil = ConfigUtil
local ACTOR_ATTR = ACTOR_ATTR
local IsInCircle = SkillRangeHelper.IsInCircle
local StatusFactoryInst = StatusFactoryInst
local ActorManagerInst = ActorManagerInst
local CtlBattleInst = CtlBattleInst
local BattleEnum = BattleEnum
local Formular = Formular
local StatusEnum = StatusEnum
local FixRand = BattleRander.Rand
local FixMod = FixMath.mod

local Actor = require "GameLogic.Battle.Actors.Actor"
local Actor2090 = BaseClass("Actor2090", Actor)


function Actor2090:__init()
    self.m_20903SkillLevel = 0
    self.m_20903SkillCfg = nil
    self.m_20903APercent = 0
    self.m_20903XPercent = 0
    self.m_20903C = 0

    self.m_performed20903 = false
end

function Actor2090:OnBorn(create_param)
    Actor.OnBorn(self, create_param)

    local skillItem = self.m_skillContainer:GetPassiveByID(20903)
    if skillItem  then
        local skillLevel = skillItem:GetLevel()
        self.m_20903SkillLevel = skillLevel
        self.m_20903SkillCfg = ConfigUtil.GetSkillCfgByID(20903)
        if self.m_20903SkillCfg then
            self.m_20903APercent = FixDiv(SkillUtil.A(self.m_20903SkillCfg, skillLevel), 100)
            self.m_20903XPercent = FixDiv(SkillUtil.X(self.m_20903SkillCfg, skillLevel), 100)
            self.m_20903C = FixIntMul(SkillUtil.C(self.m_20903SkillCfg, skillLevel), 1000)
        end
    end
end


function Actor2090:ChangeHP(giver, hurtType, chgVal, reason, judge, keyFrame, showHit, showText)
    Actor.ChangeHP(self, giver, hurtType, chgVal, reason, judge, keyFrame, showHit, showText)

    if chgVal < 0 and self.m_20903SkillCfg and not self.m_performed20903 then
        self.m_performed20903 = true
        self:ShowSkillMaskMsg(0, BattleEnum.SKILL_MASK_NANMANJIANGLING, TheGameIds.BattleBuffMaskBlue)
        local selfData = self:GetData()
        local baseHP = selfData:GetAttrValue(ACTOR_ATTR.BASE_MAXHP)
        local curHP = selfData:GetAttrValue(ACTOR_ATTR.FIGHT_MAXHP)
        local chgPercent = FixDiv(curHP, baseHP)

        if chgPercent <= self.m_20903APercent then
            local battleLogic = CtlBattleInst:GetLogic()
            ActorManagerInst:Walk(
                function(tmpTarget)       
                    if not battleLogic:IsFriend(self, tmpTarget, BattleEnum.RelationReason_SKILL_RANGE, nil, nil, true) then
                        return
                    end
        
                    local giver = StatusGiver.New(self:GetActorID(), 20903)
                    local atkBuff = StatusFactoryInst:NewStatusBuff(giver, BattleEnum.AttrReason_SKILL, self.m_20903C)
                    local targetData = tmpTarget:GetData()
                    local curPhyAtk = targetData:GetAttrValue(ACTOR_ATTR.BASE_PHY_ATK)
                    local chgPhyAtk = FixIntMul(curPhyAtk, self.m_20303XPercent)
                    atkBuff:AddAttrPair(ACTOR_ATTR.FIGHT_PHY_ATK, chgPhyAtk)
        
                    local curMagicAtk = targetData:GetAttrValue(ACTOR_ATTR.BASE_MAGIC_ATK)
                    local chgMagicAtk = FixIntMul(curMagicAtk, self.m_20303XPercent)
                    atkBuff:AddAttrPair(ACTOR_ATTR.FIGHT_MAGIC_ATK, chgMagicAtk)
                    tmpTarget:GetStatusContainer():Add(atkSpeedBuff, self)
                end
            )
        end
    end
end

return Actor2090
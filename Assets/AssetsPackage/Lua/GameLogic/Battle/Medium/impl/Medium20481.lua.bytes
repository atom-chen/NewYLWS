local BattleEnum = BattleEnum
local Formular = Formular
local ActorManagerInst = ActorManagerInst
local StatusFactoryInst = StatusFactoryInst
local FixMul = FixMath.mul

local LinearFlyToTargetMedium = require("GameLogic.Battle.Medium.impl.LinearFlyToTargetMedium")
local Medium20481 = BaseClass("Medium20481", LinearFlyToTargetMedium)

function Medium20481:Hurt()
    local performer = self:GetOwner()
    if not performer then
        return
    end

    local target = ActorManagerInst:GetActor(self.m_param.targetActorID)
    if not target or not target:IsLive() then
        return
    end

    local judge = Formular.AtkRoundJudge(performer, target, BattleEnum.HURTTYPE_PHY_HURT, true)
    if Formular.IsJudgeEnd(judge) then
        return
    end
    
    local factory = StatusFactoryInst
    local injure = Formular.CalcInjure(performer, target, self:GetSkillCfg(), BattleEnum.HURTTYPE_PHY_HURT, judge, self.m_skillBase:X())
    if injure > 0 then
        local status = factory:NewStatusHP(self.m_giver, FixMul(injure, -1), BattleEnum.HURTTYPE_PHY_HURT, BattleEnum.HPCHGREASON_BY_SKILL, judge, self.m_param.keyFrame)
        self:AddStatus(performer, target, status)

        target:OnBeatBack(performer, self.m_skillBase:B())
    end

    if self.m_skillBase:GetLevel() >= 2 then
        local injureInterval = Formular.CalcInjure(performer, target, self:GetSkillCfg(), BattleEnum.HURTTYPE_PHY_HURT, judge, self.m_skillBase:Y())
        if injureInterval > 0 then
            local intervalStatus = factory:NewStatusIntervalHP(self.m_giver, FixMul(injureInterval, -1), 1000, self.m_skillBase:C())
            self:AddStatus(performer, target, intervalStatus)
        end
    end
end

function Medium20481:ArriveDest()
    self:Hurt()
end

return Medium20481

local table_insert = table.insert
local table_sort = table.sort
local Language = Language
local UIUtil = UIUtil
local GameObject = CS.UnityEngine.GameObject
local MountMgr = Player:GetInstance():GetMountMgr()
local MountItem = require "UI.UIZuoQi.View.MountItem"

local UIMountChoiceView = BaseClass("UIMountChoiceView", UIBaseView)
local base = UIBaseView

function UIMountChoiceView:OnCreate()
    base.OnCreate(self)

    self.m_backBtn, self.m_mountItemPrefab, self.m_itemGrid = UIUtil.GetChildTransforms(self.transform, {
        "backBtn",
        "mountItemPrefab",
        "itemGrid",
    })
    self.m_mountItemPrefab = self.m_mountItemPrefab.gameObject
    
    self.m_mountItemList = {}
    self.m_huntId = 0

    local function onClick(go)
        if go.name == "backBtn" then
            TimelineMgr:GetInstance():TriggerEvent(SequenceEventType.CLICK_UI, self.winName)
            self:CloseSelf()
        end
    end
    UIUtil.AddClickEvent(self.m_backBtn.gameObject, onClick)
end

function UIMountChoiceView:OnAddListener()
    base.OnAddListener(self)

    self:AddUIListener(UIMessageNames.MN_HUNT_RSP_HORSE_SHOW, self.UpdateData)
    self:AddUIListener(UIMessageNames.MN_HUNT_RSP_SELECT_HORSE, self.RspSelectHorse)
end

function UIMountChoiceView:OnRemoveListener()
    base.OnRemoveListener(self)

    self:RemoveUIListener(UIMessageNames.MN_HUNT_RSP_HORSE_SHOW, self.UpdateData)
    self:RemoveUIListener(UIMessageNames.MN_HUNT_RSP_SELECT_HORSE, self.RspSelectHorse)
end

function UIMountChoiceView:RspSelectHorse(awardList)
    if not awardList then
        return
    end

    for i, v in ipairs(self.m_mountItemList) do
        v:HideChoiceBtn()
        v:UpdateAttr()
    end
    local awardList2 = PBUtil.ParseAwardList(awardList)
    
    local uiData = {
        titleMsg = Language.GetString(3551),
        openType = 1,
        awardDataList = awardList2,
        btn1Callback = Bind(self, self.CloseSelf)
    }
    UIManagerInst:OpenWindow(UIWindowNames.UIGetAwardPanel, uiData)
end

function UIMountChoiceView:OnEnable(...)
    base.OnEnable(self, ...)
    local _, huntId = ...

    if not huntId then
        return
    end

    self.m_huntId = huntId
    MountMgr:ReqHorseShow(huntId)
    UIManagerInst:Broadcast(UIMessageNames.MN_MAIN_TOP_RIGHT_CURRENCY_TYPE, ItemDefine.LieYuan_ID)
end

function UIMountChoiceView:UpdateData(mountList, randomseed)
    if not mountList then
        return 
    end

    math.randomseed(randomseed)
    local tempRandomSeed = math.random(1,999999)
    for i, v in pairs(mountList) do
        local mountItem = self.m_mountItemList[i]
        if not mountItem then
            local go = GameObject.Instantiate(self.m_mountItemPrefab)
            mountItem = MountItem.New(go, self.m_itemGrid)
            table_insert(self.m_mountItemList, mountItem)
            go.name = i
        end
        local realRandomSeed = tempRandomSeed % 100
        tempRandomSeed = math.floor(tempRandomSeed/100)
        mountItem:SetData(v, realRandomSeed, Bind(self, self.MountItemClick))
    end

    TimelineMgr:GetInstance():TriggerEvent(SequenceEventType.SHOW_UI_END, self.winName)
end

function UIMountChoiceView:MountItemClick(mountIndex)

    TimelineMgr:GetInstance():TriggerEvent(SequenceEventType.CLICK_UI, "MountItemClick")
    MountMgr:ReqSelectHorse(self.m_huntId, mountIndex)
end

function UIMountChoiceView:OnDisable()
    UIManagerInst:Broadcast(UIMessageNames.MN_MAIN_TOP_RIGHT_CURRENCY_TYPE, ItemDefine.Stamina_ID)
    for _, v in ipairs(self.m_mountItemList) do
        v:Delete()
    end
    self.m_mountItemList = {}
    base.OnDisable(self)
end

return UIMountChoiceView
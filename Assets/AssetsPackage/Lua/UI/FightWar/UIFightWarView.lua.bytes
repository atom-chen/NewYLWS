
local UIFightWarView = BaseClass("UIFightWarView", UIBaseView)
local base = UIBaseView
local GuildBossMgr = Player:GetInstance():GetGuildBossMgr()

local table_findIndex = table.findIndex

local FightWarItem = require "UI.FightWar.FightWarItem"
local table_insert = table.insert
local BattleEnum = BattleEnum
local GameObject = CS.UnityEngine.GameObject
local DOTween = CS.DOTween.DOTween
local SpringContent = CS.SpringContent
local GuideEnum = GuideEnum

local FIGHT_TYPE = {
 --[[    BattleEnum.BattleType_GRAVE, 
    BattleEnum.BattleType_YUANMEN,
    BattleEnum.BattleType_SHENSHOU,
    BattleEnum.BattleType_CAMPSRUSH,
    BattleEnum.BattleType_INSCRIPTION,
    BattleEnum.BattleType_BOSS1,
    BattleEnum.BattleType_HUARONG_ROAD,
    BattleEnum.BattleType_ARENA,
    BattleEnum.BattleType_SHENBING,
    BattleEnum.BattleType_THOUSAND_MILES,
    BattleEnum.BattleType_LIEZHUAN,
    BattleEnum.BattleType_QUNXIONGZHULU, ]]

    BattleEnum.BattleType_LIEZHUAN,
    BattleEnum.BattleType_INSCRIPTION,
    BattleEnum.BattleType_GRAVE,
    BattleEnum.BattleType_SHENBING,
    BattleEnum.BattleType_SHENSHOU,
    BattleEnum.BattleType_YUANMEN,
    BattleEnum.BattleType_ARENA,
    BattleEnum.BattleType_BOSS1,
    BattleEnum.BattleType_QUNXIONGZHULU,
    BattleEnum.BattleType_CAMPSRUSH
}



function UIFightWarView:OnCreate()
    base.OnCreate(self)

    self.m_fightWarItemList = {}

    self.m_canMoveItemContent = false

    self:InitView()
end

function UIFightWarView:InitView()
    local ruleBtn
    self.m_fightWarItemPrefab, self.m_backBtn, ruleBtn, self.m_itemContentTran, self.m_titleContainer, 
    self.m_container = UIUtil.GetChildRectTrans(self.transform, {
        "FightWarItemPrefab",
        "Panel/BackBtn",
        "Panel/titleContainer/RuleBtn",
        "Panel/Container/ItemScrollView/Viewport/ItemContent", 
        "Panel/titleContainer",
        "Panel/Container",
    })

    local titleText = UIUtil.FindText(self.transform, "Panel/titleContainer/TitleText")
    titleText.text = Language.GetString(1700)
    
    self.m_fightWarItemPrefab = self.m_fightWarItemPrefab.gameObject

    local onClick = Bind(self, self.OnClick)

    UIUtil.AddClickEvent(self.m_backBtn.gameObject, onClick)
    UIUtil.AddClickEvent(ruleBtn.gameObject, onClick)
    
end

function UIFightWarView:OnClick(go, x, y)
    if go.name == "BackBtn" then
        self:CloseSelf()
    elseif go.name == "RuleBtn" then

    end
end


function UIFightWarView:OnEnable(...)
    base.OnEnable(self, ...)

    if GuideMgr:GetInstance():IsPlayingGuide(GuideEnum.GUIDE_SHENBING) then
        self.m_canMoveItemContent = true
    end

    self.m_itemContentTran.anchoredPosition = Vector2.zero
    Player:GetInstance():GetUserMgr():ReqFightWarData()
   
    self:TweenOpen()
end

function UIFightWarView:UpdateView(act_copy_list)
    if not act_copy_list then
        return
    end

    -- print("act_copy_list ", tostring(act_copy_list))

    for i, v in ipairs(FIGHT_TYPE) do
        local fightWarItem = self.m_fightWarItemList[i]
        if fightWarItem == nil then
            local go = GameObject.Instantiate(self.m_fightWarItemPrefab)
            fightWarItem = FightWarItem.New(go, self.m_itemContentTran)
            table_insert(self.m_fightWarItemList, fightWarItem)
        end

        local findIndex = table_findIndex(act_copy_list, function(act_copy)
            return act_copy.battle_type == v
        end)

        -- print("findIndex :", findIndex, v)
    
        if findIndex > 0 then
            fightWarItem:UpdateData(i, act_copy_list[findIndex])
        end
    end

   --[[  if self.m_canMoveItemContent then
        self.m_canMoveItemContent = false

       

        self.m_springContent = SpringContent.Begin(self.m_itemContentTran.gameObject, Vector3.New(0, 674.6, 0), 8, function()
          
            TimelineMgr:GetInstance():TriggerEvent(SequenceEventType.SHOW_UI_END, self.winName)
        end)
    end ]]

    TimelineMgr:GetInstance():TriggerEvent(SequenceEventType.SHOW_UI_END, self.winName)
end

function UIFightWarView:OnDestroy()
    for i, v in ipairs(self.m_fightWarItemList) do 
        v:Delete()
    end
    self.m_fightWarItemList = nil
    
    self.m_springContent = nil

    base.OnDestroy(self)
end


function UIFightWarView:OnAddListener()
	base.OnAddListener(self)
	-- UI消息注册
    self:AddUIListener(UIMessageNames.MN_BOSS_RSP_BOSSINFO, self.EnterBossFight)
    self:AddUIListener(UIMessageNames.MN_GUILDBOSS_RSP_BOSSINFO, self.EnterGuildBossFight)
    self:AddUIListener(UIMessageNames.MN_FIGHTWAR_INFO, self.UpdateView)
end

function UIFightWarView:OnRemoveListener()
	base.OnRemoveListener(self)
	-- UI消息注销
    self:RemoveUIListener(UIMessageNames.MN_BOSS_RSP_BOSSINFO, self.EnterBossFight)
    self:RemoveUIListener(UIMessageNames.MN_GUILDBOSS_RSP_BOSSINFO, self.EnterGuildBossFight)
    self:RemoveUIListener(UIMessageNames.MN_FIGHTWAR_INFO, self.UpdateView)
end

function UIFightWarView:EnterBossFight(msgInfo)
	if msgInfo then
		UIManagerInst:OpenWindow(UIWindowNames.UIWorldBoss, "start", msgInfo)
	else
		Logger.Log(' ======= no boss fight info msg ')
	end
end

function UIFightWarView:EnterGuildBossFight(go)
	UIManagerInst:OpenWindow(UIWindowNames.UIGuildBoss, go)
end

function UIFightWarView:TweenOpen()
    DOTween.ToFloatValue(function()
        return 0
    end, 
    function(value)
        self.m_backBtn.anchoredPosition = Vector3.New(0, 100 - 146.5 * value, 0)
        self.m_titleContainer.anchoredPosition = Vector3.New(0, 270 - 270 * value, 0)
        self.m_container.anchoredPosition = Vector3.New(0, -500 + 500 * value, 0)
    end, 1, 0.3)
end

return UIFightWarView